from __future__ import annotations

class Knoten:
    def __init__(self, inhalt):
        """ Konstruktor f체r die Klasse Knoten: speichert den Inhalt und legt
        eine Referenz auf den n채chsten Knoten an. """
        self.inhalt = inhalt   # keine Typ-Angabe: inhalt kann beliebig sein
        self.naechster: Knoten|None = None    # Typ-Annotation: naechster ist ein Knoten oder None

    def __str__(self) -> str:
        return str(self.inhalt)
    
    
class VerketteteListe:
    def __init__(self):
        self.erster: Knoten|None = None   # Der erste Knoten in der Liste (Listenkopf)    

    def __str__(self) -> str:
        """ Gibt die Liste als Zeichenkette, getrennt durch Pfeile, zur체ck. """
        inhalte = []
        knoten = self.erster
        while knoten is not None:
            inhalte.append(knoten.inhalt)
            knoten = knoten.naechster
        return " -> ".join(inhalte)

    def einfuegen_vorne(self, pInhalt) -> None:
        """F체gt einen neuen Knoten mit pInhalt am Anfang der Liste ein."""
        neu = Knoten(pInhalt)   # "Verpacke" den Inhalt in einen Knoten
        neu.naechster = self.erster  # Nachfolger des neuen Knotens ist der bisherige Listenkopf
        self.erster = neu  # Der neue Knoten ist ab jetzt der Listenkopf

    def anzahlElemente(self): 
        knoten = self.erster 
        Count = 0 
        while knoten is not None: 
            Count += 1 
            Knoten = knoten.naechster 
 
    def einfuegen(self, indexnr, pinhalt): 
        neu = Knoten(pinhalt)
        knoten = self.erster
        naechster = self.erster
        count = 0
        while indexnr != count:
            count +=1
            knoten = naechster
            naechster = naechster.naechster
        neu.naechster = naechster
        knoten.naechster = neu


liste_bsp1 = VerketteteListe()
liste_bsp1.einfuegen_vorne("Anna")
liste_bsp1.einfuegen_vorne("Bibi")
liste_bsp1.einfuegen_vorne("Coco")
liste_bsp1.einfuegen_vorne("Dina")
liste_bsp1.einfuegen(2, "david")
print(liste_bsp1)